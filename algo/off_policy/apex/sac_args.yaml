---
env:
    name: BipedalWalkerHardcore-v2
    max_episode_steps: 2000
    video_path: video
    seed: 0
    clip_reward: -50
agent:
    algorithm: apex-sac
    temperature: auto
    gamma: 0.99
    polyak: .995                # moving average rate
    batch_size: 256
    max_action_repetitions: 1
    n_workers: 6
    schedule_lr: True           # if this is true, use lr scheduler defined in basic_agent.py instead of the following args

    # model path: model_root_dir/model_name/model_name, two model_names ensure each model saved in an independent folder
    # tensorboard path: log_root_dir/model_name
    model_root_dir: saved_models            # root path for savinng models
    log_root_dir: logs  # root path for tensorboard logs
    model_name: baseline

    loss_type: mse              # huber or mse
    n_steps: 3
    
    Policy:
        n_noisy: 2
        noisy_sigma: 0.4        # standard deviation for noisy layers
        units: [512, 256, 256]
        norm: layer
        target: False
        # args for optimizer
        learning_rate: &policy_lr 1e-4
        decay_rate: &decay_rate .95
        decay_steps: &decay_steps 1e4
    Q:
        units: [512, 512, 256]
        norm: layer
        # args for optimizer
        learning_rate: 3e-4
        decay_rate: *decay_rate
        decay_steps: *decay_steps
    Temperature:
        type: state_action
        noisy: False
        # args for optimizer
        learning_rate: *policy_lr
        decay_rate: *decay_rate
        decay_steps: *decay_steps

    env_stats:
        times: 1
        stats: [score, score_mean, score_std, epslen, epslen_mean, epslen_std]

# argumennts for prioritized replay
buffer:
    type: proportional # proportional
    normalize_reward: False
    reward_scale: 5
    to_update_priority: False

    alpha: 0.7
    beta0: 0.4
    epsilon: 1e-4
    beta_steps: 5e4
    min_size: 5e4
    capacity: 1e6

    local_capacity: 100
    tb_capacity: 10
    